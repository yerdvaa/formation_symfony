<?php

namespace adminBundle\Repository;

/**
 * productRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindAll()
    {
        // Creation d'une requête DQL
        // findAll() maison
        $query = $this->getEntityManager()
                    ->createQuery('
                        SELECT prod
                        FROM adminBundle:Product prod
                    ');
        //die(dump($query->getResult()));

        // Création d'une requête grâce au builder
        // findAll() maison
        $query = $this->getEntityManager()->createQueryBuilder()
                    ->select("prod")
                    ->from("adminBundle:Product", "prod")
                    ->getQuery();

        //die(dump($query->getResult()));
    }

    public function findProduct()
    {
        $result = $this->createQueryBuilder('product')
                    ->select('product.titleFR, product.price, brand.title')
                    ->join('product.marque','brand')
                    ->where('product.price > :prix')
                    ->andWhere('brand.title LIKE :nomMarque')
                    ->setParameters(['prix'=> 10, 'nomMarque'=>'%titre1%'])
                    ->getQuery()
                    ->getResult();
            //dump($result);exit;
            return$result;
    }

    public function myFind($id)
    {
        // Creation d'une requête DQL
        // find() maison
        $query = $this->getEntityManager()
            ->createQuery('
                    			SELECT prod
                          FROM adminBundle:Product prod
                          WHERE prod.id = :identifiant
                    ')
                        ->setParameter('identifiant', $id);
        /* Plusieurs paramètres
              ->setParameters([
                      'identifiant' => $id,
                  'autre_variable' => $autre
              ])
              */
       // die(dump($query->getOneOrNullResult()));

        // Création d'une requête grâce au builder
        // findAll() maison
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select("prod")
            ->from("adminBundle:Product", "prod")
            ->getQuery();

        //die(dump($query->getResult()));

        return $query->getResult();

    }

    public function LessThanFiveQuantity()
    {
        $query = $this->getEntityManager()
                    ->createQuery('
                        SELECT prod
                        FROM adminBundle:Product prod
                        WHERE prod.quantity < 5
                    ');
        //die(dump($query->getResult()));
    }
    public function QuantityNull()
    {
        $query = $this->getEntityManager()
            ->createQuery('
                        SELECT prod
                        FROM adminBundle:Product prod
                        WHERE prod.quantity = 0
                    ');
        //die(dump($query->getResult()));
    }

    public function ProductCount()
    {
        $query = $this->getEntityManager()
            ->createQuery('
                        SELECT COUNT(prod)
                        FROM adminBundle:Product prod
                        
                    ');
        //die(dump($query->getResult()));
    }

    public function ProductQuantity()
    {
        $query = $this->getEntityManager()
            ->createQuery('
                        SELECT SUM(prod.quantity)
                        FROM adminBundle:Product prod
                        
                    ');
        //die(dump($query->getResult()));
    }

    public function PriceMinMax()
    {
        $query = $this->getEntityManager()
            ->createQuery('
                        SELECT (MIN(prod.price)), (MAX(prod.price))
                        FROM adminBundle:Product prod
                    ');
        //die(dump($query->getResult()));
    }

    public function PriceMax()
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()

                        ->select('prod')
                        ->from('adminBundle:Product', 'prod')
                        ->orderBy('prod.price', 'DESC')
                        ->setMaxResults(6)
                        ->getQuery()
                    ;
        return $query->getResult();
    }

    public function QuantityMax()
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()

            ->select('prod')
            ->from('adminBundle:Product', 'prod')
            ->orderBy('prod.quantity', 'DESC')
            ->setMaxResults(3)
            ->getQuery()
        ;
        return $query->getResult();
    }

    public function findProductByLocale($id, $locale)
    {
        $locale = strtoupper($locale);
        $result = $this->createQueryBuilder('product')
            ->select('product.id', "product.title$locale", "product.description$locale")
            ->where('product.id = :id')
            ->setParameters([
                'id' => $id
            ])
            ->getQuery()
            ->getOneOrNullResult();

        return $result;
    }


    // Afficher les produits selon leur catégories
    public function myFindProductionSelonCategorie($categorie_id, $offset)
    {
        $results = $this
            ->createQueryBuilder('p')
            ->join('p.categories', 'c')
            ->where('c.id = :idCat')
            ->setParameters(['idCat' => $categorie_id])
            ->setFirstResult($offset)
            ->setMaxResults(4)
            ->getQuery()
            ->getResult();
        return $results;
    }

    // Afficher les commentaires selon les produits
   /*public function commentProduct($comment_id)
    {
        $results = $this
            ->createQueryBuilder('comment')
            ->join('product')
            ->where('comment.id_product = :idComment')
            ->setParameters(['idComment' => $comment_id])
            ->getQuery()
            ->getResult();
        return $results;
    }*/

}
